from portfolio.models import Comment
from django.utils import timezone
from portfolio.utils import get_data, generate_profile_image, generate_username

Comment.objects.all().delete()
c = Comment(content = "I am the first comment!", date=timezone.now(), image = generate_profile_image(), username = generate_username())
c.save()

c = Comment(content = "Second comment!", date=timezone.now(), image = generate_profile_image(), username = generate_username())
c.save()

c = Comment(content = "On Python 2, you should define __unicode__() methods returning unicode values instead. Django models have a default __str__() method that calls __unicode__() and converts the result to a UTF-8 bytestring. This means that unicode(p) will return a Unicode string, and str(p) will return a bytestring, with characters encoded as UTF-8. Python does the opposite: object has a __unicode__ method that calls __str__ and interprets the result as an ASCII bytestring. This difference can create confusion.", date=timezone.now(), image = generate_profile_image(), username = generate_username())
c.save()

c = Comment(content = "I am the child of the first comment!", date=timezone.now(), image = generate_profile_image(), username = generate_username(), parent=Comment.objects.get(pk=16))
c.save()

c = Comment(content = "I am also the child of the first comment~ >.<", date=timezone.now(), image = generate_profile_image(), username = generate_username(), parent=Comment.objects.get(id=16))
c.save()

c = Comment(content = "After the second comment~ O.O", date=timezone.now(), image = generate_profile_image(), username = generate_username(), parent=Comment.objects.get(id=17))
c.save()

c = Comment(content = "Next, secure your portfolio against malicious user input to comments. Using techniques such as prepared statements and proper string escaping, secure your code at minimum against SQL Injection Attacks and Cross-site Scripting Attacks. Use the internet to find resources about how to accomplish these goals with PHP.", date=timezone.now(), image = generate_profile_image(), username = generate_username())
c.save()
